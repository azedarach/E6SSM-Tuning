// ====================================================================
// Class for calculating the fine tuning in the MSSM
// ====================================================================

// File generated at Sun 24 Aug 2014 16:16:41

#ifndef lowMSSM_SPECTRUM_GENERATOR_H
#define lowMSSM_SPECTRUM_GENERATOR_H

#include "lowMSSM_two_scale_model.hpp"
#include "lowMSSM_two_scale_susy_scale_constraint.hpp"
#include "lowMSSM_two_scale_low_scale_constraint.hpp"
#include "lowMSSM_two_scale_convergence_tester.hpp"
#include "lowMSSM_two_scale_initial_guesser.hpp"
#include "lowMSSM_utilities.hpp"

#include "coupling_monitor.hpp"
#include "error.hpp"
#include "numerics.hpp"
#include "two_scale_running_precision.hpp"
#include "two_scale_solver.hpp"

namespace flexiblesusy {

template <class T>
class lowMSSM_spectrum_generator {
public:
   lowMSSM_spectrum_generator()
      : solver(), model()
      , susy_scale_constraint()
      , low_scale_constraint()
      , susy_scale(0.)
      , low_scale(0.)
      , parameter_output_scale(0.)
      , precision_goal(1.0e-4)
      , max_iterations(0)
      , beta_loop_order(2)
      , threshold_corrections_loop_order(1)
      , calculate_sm_masses(false) {}
   ~lowMSSM_spectrum_generator() {}

   double get_susy_scale() const { return susy_scale; }
   double get_low_scale()  const { return low_scale;  }
   const lowMSSM<T>& get_model() const { return model; }
   const Problems<lowMSSM_info::NUMBER_OF_PARTICLES>& get_problems() const {
      return model.get_problems();
   }
   int get_exit_code() const { return get_problems().have_serious_problem(); };
   void set_input_scale(double) {}
   void set_parameter_output_scale(double s) { parameter_output_scale = s; }
   void set_precision_goal(double precision_goal_) { precision_goal = precision_goal_; }
   void set_pole_mass_loop_order(unsigned l) { model.set_pole_mass_loop_order(l); }
   void set_ewsb_loop_order(unsigned l) { model.set_ewsb_loop_order(l); }
   void set_beta_loop_order(unsigned l) { beta_loop_order = l; }
   void set_max_iterations(unsigned n) { max_iterations = n; }
   void set_calculate_sm_masses(bool flag) { calculate_sm_masses = flag; }
   void set_threshold_corrections_loop_order(unsigned t) { threshold_corrections_loop_order = t; }

   void run(const QedQcd& oneset, const lowMSSM_input_parameters& input);
   void write_running_couplings(const std::string& filename = "lowMSSM_rge_running.dat") const;
   void write_spectrum(const std::string& filename = "lowMSSM_spectrum.dat") const;

private:
   RGFlow<T> solver;
   lowMSSM<T> model;
   lowMSSM_susy_scale_constraint<T> susy_scale_constraint;
   lowMSSM_low_scale_constraint<T>  low_scale_constraint;
   double susy_scale, low_scale;
   double parameter_output_scale; ///< output scale for running parameters
   double precision_goal; ///< precision goal
   unsigned max_iterations; ///< maximum number of iterations
   unsigned beta_loop_order; ///< beta-function loop order
   unsigned threshold_corrections_loop_order; ///< threshold corrections loop order
   bool calculate_sm_masses; ///< calculate SM pole masses
};

/**
 * @brief Run's the RG solver with the given input parameters
 *
 * This function sets up the RG solver using a susy-scale
 * and low-scale constraint.  Afterwards the solver is run until
 * convergence is reached or an error occours.  Finally the particle
 * spectrum (pole masses) is calculated.
 *
 * @param oneset Standard Model input parameters
 * @param input model input parameters
 */
template <class T>
void lowMSSM_spectrum_generator<T>::run(const QedQcd& oneset,
                                const lowMSSM_input_parameters& input)
{
   susy_scale_constraint.clear();
   low_scale_constraint .clear();
   susy_scale_constraint.set_input_parameters(input);
   low_scale_constraint .set_input_parameters(input);
   low_scale_constraint .set_sm_parameters(oneset);
   susy_scale_constraint.initialize();
   low_scale_constraint .initialize();

   std::vector<Constraint<T>*> upward_constraints {
      &low_scale_constraint,
      &susy_scale_constraint
   };

   std::vector<Constraint<T>*> downward_constraints {
      &susy_scale_constraint,
      &low_scale_constraint
   };

   model.set_input_parameters(input);
   model.do_calculate_sm_pole_masses(calculate_sm_masses);
   model.set_loops(beta_loop_order);
   model.set_thresholds(threshold_corrections_loop_order);

   lowMSSM_convergence_tester<T> convergence_tester(&model, precision_goal);
   if (max_iterations > 0)
      convergence_tester.set_max_iterations(max_iterations);

   lowMSSM_initial_guesser<T> initial_guesser(&model, input, oneset,
                                                  low_scale_constraint,
                                                  susy_scale_constraint);
   Two_scale_increasing_precision precision(10.0, precision_goal);

   solver.reset();
   solver.set_convergence_tester(&convergence_tester);
   solver.set_running_precision(&precision);
   solver.set_initial_guesser(&initial_guesser);
   solver.add_model(&model, upward_constraints, downward_constraints);

   susy_scale = low_scale = 0.;

   try {
      solver.solve();
      susy_scale = susy_scale_constraint.get_scale();
      low_scale  = low_scale_constraint.get_scale();

      model.run_to(susy_scale);
      model.solve_ewsb();
      model.calculate_spectrum();

      // run to output scale (if scale > 0)
      if (!is_zero(parameter_output_scale)) {
         model.run_to(parameter_output_scale);
      }
   } catch (const NoConvergenceError&) {
      model.get_problems().flag_no_convergence();
   } catch (const NonPerturbativeRunningError&) {
      model.get_problems().flag_no_perturbative();
   } catch (const Error& error) {
      model.get_problems().flag_thrown();
   } catch (const std::string& str) {
      model.get_problems().flag_thrown();
   } catch (const char* str) {
      model.get_problems().flag_thrown();
   } catch (const std::exception& error) {
      model.get_problems().flag_thrown();
   }
}

/**
 * Create a text file which contains the values of all model
 * parameters at all scales between the low-scale and the susy-scale.
 *
 * @param filename name of output file
 */
template <class T>
void lowMSSM_spectrum_generator<T>::write_running_couplings(const std::string& filename) const
{
   lowMSSM<T> tmp_model(model);
   tmp_model.run_to(low_scale);

   lowMSSM_parameter_getter parameter_getter;
   Coupling_monitor<lowMSSM<T>, lowMSSM_parameter_getter>
      coupling_monitor(tmp_model, parameter_getter);

   coupling_monitor.run(low_scale, susy_scale, 100, true);
   coupling_monitor.write_to_file(filename);
}

/**
 * Write spectrum (pole masses) to a text file
 *
 * @param filename output file name
 */
template <class T>
void lowMSSM_spectrum_generator<T>::write_spectrum(const std::string& filename) const
{
   lowMSSM_spectrum_plotter plotter;
   plotter.extract_spectrum<T>(model);
   plotter.write_to_file(filename);
}

} // namespace flexiblesusy

#endif
